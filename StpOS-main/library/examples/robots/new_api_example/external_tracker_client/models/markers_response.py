# coding: utf-8

"""
    Tracking API

    API for ArUco marker tracking with homography transformation. The OpenAPI spec here enables automated client generation.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from external_tracker_client.models.point_out import PointOut
from typing import Optional, Set
from typing_extensions import Self

class MarkersResponse(BaseModel):
    """
    MarkersResponse
    """ # noqa: E501
    robot_found: StrictBool
    robot: Optional[PointOut]
    robot_angle: Union[StrictFloat, StrictInt]
    tl: Optional[PointOut]
    tr: Optional[PointOut]
    br: Optional[PointOut]
    bl: Optional[PointOut]
    __properties: ClassVar[List[str]] = ["robot_found", "robot", "robot_angle", "tl", "tr", "br", "bl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarkersResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of robot
        if self.robot:
            _dict['robot'] = self.robot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tl
        if self.tl:
            _dict['tl'] = self.tl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tr
        if self.tr:
            _dict['tr'] = self.tr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of br
        if self.br:
            _dict['br'] = self.br.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bl
        if self.bl:
            _dict['bl'] = self.bl.to_dict()
        # set to None if robot (nullable) is None
        # and model_fields_set contains the field
        if self.robot is None and "robot" in self.model_fields_set:
            _dict['robot'] = None

        # set to None if tl (nullable) is None
        # and model_fields_set contains the field
        if self.tl is None and "tl" in self.model_fields_set:
            _dict['tl'] = None

        # set to None if tr (nullable) is None
        # and model_fields_set contains the field
        if self.tr is None and "tr" in self.model_fields_set:
            _dict['tr'] = None

        # set to None if br (nullable) is None
        # and model_fields_set contains the field
        if self.br is None and "br" in self.model_fields_set:
            _dict['br'] = None

        # set to None if bl (nullable) is None
        # and model_fields_set contains the field
        if self.bl is None and "bl" in self.model_fields_set:
            _dict['bl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarkersResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "robot_found": obj.get("robot_found"),
            "robot": PointOut.from_dict(obj["robot"]) if obj.get("robot") is not None else None,
            "robot_angle": obj.get("robot_angle"),
            "tl": PointOut.from_dict(obj["tl"]) if obj.get("tl") is not None else None,
            "tr": PointOut.from_dict(obj["tr"]) if obj.get("tr") is not None else None,
            "br": PointOut.from_dict(obj["br"]) if obj.get("br") is not None else None,
            "bl": PointOut.from_dict(obj["bl"]) if obj.get("bl") is not None else None
        })
        return _obj


